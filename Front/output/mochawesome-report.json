{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2024-02-22T04:22:22.390Z",
    "end": "2024-02-22T04:22:50.615Z",
    "duration": 28225,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "156705d9-00ab-49d2-90fb-7fd8c13c296b",
      "title": "",
      "fullFile": "C:\\Users\\benja\\Desktop\\Ingefinal3\\Front\\testvisual_test.js",
      "file": "\\testvisual_test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
          "title": "Prueba",
          "fullFile": "C:\\Users\\benja\\Desktop\\Ingefinal3\\Front\\testvisual_test.js",
          "file": "\\testvisual_test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: codeceptjs.beforeSuite in \"Prueba\"",
              "fullTitle": "Prueba \"before all\" hook: codeceptjs.beforeSuite in \"Prueba\"",
              "timedOut": false,
              "duration": 951,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteSetup(suite)",
              "err": {},
              "uuid": "d3de5ce2-6591-44ae-9151-af8b32cd45d7",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: codeceptjs.before in \"Prueba\"",
              "fullTitle": "Prueba \"before each\" hook: codeceptjs.before in \"Prueba\"",
              "timedOut": false,
              "duration": 470,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.setup(suite)",
              "err": {},
              "uuid": "c75392c7-dd1a-4cff-8fdd-ae37943605ab",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: codeceptjs.afterSuite in \"Prueba\"",
              "fullTitle": "Prueba \"after all\" hook: codeceptjs.afterSuite in \"Prueba\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.suiteTeardown(suite)",
              "err": {},
              "uuid": "c0fc1cb5-0765-480d-9313-18c480767b89",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: finalize codeceptjs in \"Prueba\"",
              "fullTitle": "Prueba \"after each\" hook: finalize codeceptjs in \"Prueba\"",
              "timedOut": false,
              "duration": 42,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "scenario.teardown(suite)",
              "err": {},
              "uuid": "0a93d1d9-864e-4f1d-ad5c-6a1d14bd1f84",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Preparando Tests.",
              "fullTitle": "Prueba: Preparando Tests.",
              "timedOut": false,
              "duration": 15100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "I }) => {\n    I.wait(15);\n    console.log('Estamos listos para los tests');",
              "err": {},
              "uuid": "40ff6a8b-95de-420c-86df-52e16253b6bf",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Flaky scenario",
              "fullTitle": "Prueba Flaky scenario",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {},
              "uuid": "dd1f6b7a-4e12-485c-9558-075a94bef8cb",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testing Upload - Error",
              "fullTitle": "Prueba Testing Upload - Error",
              "timedOut": false,
              "duration": 2877,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "recorder.errHandler((err) => {\n  recorder.session.start('teardown');\n  recorder.cleanAsyncErr();\n  if (test.throws) { // check that test should actually fail\n    try {\n      assertThrown(err, test.throws);\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done());\n      return;\n    } catch (newErr) {\n      err = newErr;\n    }\n  }\n  event.emit(event.test.failed, test, err);\n  event.emit(event.test.finished, test);\n  recorder.add(() => done(err));\n});\nif (isAsyncFunction(testFn)) {\n  event.emit(event.test.started, test);\n  const catchError = e => {\n    recorder.throw(e);\n    recorder.catch((e) => {\n      const err = (recorder.getAsyncErr() === null) ? e : recorder.getAsyncErr();\n      recorder.session.start('teardown');\n      recorder.cleanAsyncErr();\n      event.emit(event.test.failed, test, err);\n      event.emit(event.test.finished, test);\n      recorder.add(() => done(err));\n    });\n  };\n  let injectedArguments;\n  try {\n    injectedArguments = getInjectedArguments(testFn, test);\n  } catch (e) {\n    catchError(e);\n    return;\n  }\n  testFn.call(test, injectedArguments).then(() => {\n    recorder.add('fire test.passed', () => {\n      event.emit(event.test.passed, test);\n      event.emit(event.test.finished, test);\n    });\n    recorder.add('finish test', () => done());\n    recorder.catch();\n  }).catch(catchError);\n  return;\n}\ntry {\n  event.emit(event.test.started, test);\n  testFn.call(test, getInjectedArguments(testFn, test));\n} catch (err) {\n  recorder.throw(err);\n} finally {\n  recorder.add('fire test.passed', () => {\n    event.emit(event.test.passed, test);\n    event.emit(event.test.finished, test);\n  });\n  recorder.add('finish test', () => done());\n  recorder.catch();\n}",
              "err": {
                "message": "TypeError: matcher.locator(...).all is not a function",
                "estack": "TypeError: matcher.locator(...).all is not a function\n    at findElements (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:3460:55)\n    at Playwright._locate (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:1260:12)\n    at async Playwright.findFields (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:3606:13)\n    at async Playwright.fillField (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:1709:17)",
                "diff": null
              },
              "uuid": "b45b9c30-4a6c-4b52-b72f-31e4fd7bf573",
              "parentUUID": "6f4152fe-425e-4b45-8483-dc4bacd0d730",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40ff6a8b-95de-420c-86df-52e16253b6bf",
            "dd1f6b7a-4e12-485c-9558-075a94bef8cb"
          ],
          "failures": [
            "b45b9c30-4a6c-4b52-b72f-31e4fd7bf573"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17979,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./output",
        "reportFilename": "mochawesome-report"
      },
      "version": "6.2.0"
    }
  }
}